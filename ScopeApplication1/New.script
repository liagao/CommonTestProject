REFERENCE @"/shares/searchXAP.Prod/searchXAPBIN/Microsoft.Bing.Xap.QueryLog.dll";
REFERENCE @"/shares/searchXAP.Prod/searchXAPBIN/Microsoft.Bing.Xap.QueryLogExtractor.dll";
REFERENCE @"/shares/searchXAP.Prod/searchXAPBIN/Newtonsoft.Json.dll";
REFERENCE @"/shares/searchXAP.Prod/searchXAPBIN//Microsoft.XAP.Telemetry.Histogram.dll";

USING Microsoft.Bing.Xap.QueryLog;
USING Microsoft.XAP.Telemetry.Histogram;

#DECLARE inputStreamBing string = "/shares/searchDM.upload/SearchXAPLogs/PROD/?date=@@Day1@@&hour=@@BeginHour@@...@@EndHour1@@";

#DECLARE isDay2Empty bool = "@@Day2@@" == "";
#IF(!@isDay2Empty)
#DECLARE inputStreamBing2 string = "/shares/searchDM.upload/SearchXAPLogs/PROD/?date=@@Day2@@&hour=0...@@EndHour2@@";
#ENDIF

#DECLARE nodeDataResultStream string = @@ResultDirectory@@ + "/nodesData_@@Day1@@_@@BeginHour@@_@@EndHour2@@.out";
#DECLARE nodeDataResultStreamTemp1 string = @@ResultDirectory@@ + "/nodesData_@@Day1@@_@@BeginHour@@_@@EndHour2@@.out1";
#DECLARE nodeDataResultStreamTemp2 string = @@ResultDirectory@@ + "/nodesData_@@Day1@@_@@BeginHour@@_@@EndHour2@@.out2";
#DECLARE nodeDataResultStreamTemp3 string = @@ResultDirectory@@ + "/nodesData_@@Day1@@_@@BeginHour@@_@@EndHour2@@.out3";

#DECLARE QueriesWithNodesPrefixResultStream string = @@ResultDirectory@@ + "/nodesCPData_@@Day1@@_@@BeginHour@@_@@EndHour2@@.out";
#DECLARE QueriesWithNodesPrefixResultStreamTemp1 string = @@ResultDirectory@@ + "/nodesCPData_@@Day1@@_@@BeginHour@@_@@EndHour2@@.out1";
#DECLARE QueriesWithNodesPrefixResultStreamTemp2 string = @@ResultDirectory@@ + "/nodesCPData_@@Day1@@_@@BeginHour@@_@@EndHour2@@.out2";
#DECLARE QueriesWithNodesPrefixResultStreamTemp3 string = @@ResultDirectory@@ + "/nodesCPData_@@Day1@@_@@BeginHour@@_@@EndHour2@@.out3";

#DECLARE controlFlight string = @@ControlFlight@@;
#DECLARE treatmentFlight string = @@TreatmentFlight@@;
#DECLARE flightPrefix string = "@@FlightPrefix@@";
#DECLARE env string = "@@Environment@@";
#DECLARE variant string = "@@CommonVariant@@";
#DECLARE nodePrefix string = "@@NodePrefix@@";
#DECLARE myWorkFlow string ="@@WorkFlow@@";
#DECLARE isAllDC bool = "@@Environment@@" == "All DC";
#DECLARE isEnUsProd bool = "@@CommonVariant@@" == "Mkt:EnUs; TrafficType:Prod";

/*****************************************************************************
    Query, plugin and node data
*****************************************************************************/
AllRawLog =
    EXTRACT EnvironmentName : string,
            Experiment : string,
            ExperimentVersion : string,
            Workflow : string,
            WorkflowVersion : string,
            CommonVariant : string,
            FormattedFlights : string,
            QueryId : string,
            QueryLatency : long,
            SendStartMS : long,
            ReceiveEndMS : long,
            AHOverheadMS : long,
            StartAHOverheadMS : long,
            EndAHOverheadMS : long,
            Cost : long,
            NodesData : QueryNodesData
    FROM @inputStreamBing
#IF(!@isDay2Empty)
, @inputStreamBing2
#ENDIF
    USING XapDataExtractor(@flightPrefix, ",")
    HAVING Workflow == @myWorkFlow AND         
          #IF(@isEnUsProd)
          (
            CommonVariant == "Mkt:EnUs; TrafficType:ProdNonPremium" OR
            CommonVariant == "Mkt:EnUs; TrafficType:Premium"
          )
          #ELSE
            CommonVariant == @variant       
          #ENDIF
          #IF(!@isAllDC)
          AND EnvironmentName == @env
          #ENDIF
          ;

/*****************************************************************************
    Query data processing
*****************************************************************************/
DataFiltered =
    SELECT 
        EnvironmentName,
        QueryLatency AS WorkflowLatency
    FROM AllRawLog
    WHERE Experiment == "Prod" AND
          QueryLatency >= 0 AND
          QueryLatency < 10000 AND
          SendStartMS >= 0 AND
          SendStartMS < 10000 AND
          ReceiveEndMS >= 0 AND
          ReceiveEndMS < 10000 AND
          Cost >= 0 ; 


HistogramAggOverall =
    SELECT
        EnvironmentName, 
        BuildHistogram(BitConverter.GetBytes((double) WorkflowLatency)) AS WorkflowLatencyHistogram
    FROM DataFiltered;

QueryResultOverall =
    SELECT EnvironmentName,
           QuickHistogram.Parse(WorkflowLatencyHistogram).GetPercentile(89.6, 0) AS P90,
           QuickHistogram.Parse(WorkflowLatencyHistogram).GetPercentile(95, 0) AS P95,
           QuickHistogram.Parse(WorkflowLatencyHistogram).GetPercentile(98.6, 0) AS P99
    FROM HistogramAggOverall;

/*****************************************************************************
    Plugin data processing
*****************************************************************************/
AllValidRawLog =
    SELECT EnvironmentName,
           Workflow,
           CommonVariant,
           QueryId,
           NodesData,
           FormattedFlights
    FROM AllRawLog
    WHERE !string.IsNullOrEmpty(Workflow) AND
          !string.IsNullOrEmpty(EnvironmentName) AND
          Workflow.Length <= 200 AND
          EnvironmentName.Length < 50; 

AllRawLogWithNodesData =
    PROCESS AllValidRawLog
    USING QueryNodesDataProcessor
    HAVING !string.IsNullOrEmpty(Plugin) AND
           !string.IsNullOrEmpty(Node) AND
           Plugin.Length <= 500 AND
           Node.Length <= 500 AND
           Finished == true;

[LOWDISTINCTNESS(InCriticalPath,InP95)]
AllRawLogFinished =
    SELECT InCriticalPath,
           Cached,
           CoreTimeMicroSec/1000 AS CoreTime,
           RemoteLatency,
           RemoteRequestSize,
           RemoteResponseSize,
           ((P90 <= TotalLatency && TotalLatency <= P99) ? true : false) AS InP95,
           Latency,
           StartTime,
           Node,
           QueryId,
           FormattedFlights,
           (Utility.isMatchNodePrefix(Node, @nodePrefix)? true:false) AS hasNodePrefix,
           (Node.Split('.').First()) AS NodePrefix
    FROM AllRawLogWithNodesData INNER JOIN QueryResultOverall
    ON AllRawLogWithNodesData.EnvironmentName == QueryResultOverall.EnvironmentName; 

LogWithFlt = 
    SELECT Flight,          
           InCriticalPath,
           Cached,
           CoreTime,
           RemoteLatency,
           RemoteRequestSize,
           RemoteResponseSize,
           InP95,
           Latency,
           StartTime,
           Node,
           QueryId,
           hasNodePrefix,
           NodePrefix
    FROM AllRawLogFinished CROSS APPLY FormattedFlights.Split(',') AS Flight
    HAVING 
        @controlFlight.Equals(Flight, StringComparison.OrdinalIgnoreCase) OR
        @treatmentFlight.Equals(Flight, StringComparison.OrdinalIgnoreCase);

NodesPerQuery =
   SELECT Flight,
          QueryId,
          NodePrefix,
          InP95,
          COUNT( * ) AS NodeCount,
          MAX ((hasNodePrefix && InCriticalPath)?1:0) AS queryWithNodePrefixInCP
   FROM LogWithFlt;

QueriesForFlt = 
SELECT  Flight,
        NodePrefix,
        AVG(NodeCount) AS AvgNodeCountPerQuery,
        COUNT(*) AS QueryCount,      
        SUM(queryWithNodePrefixInCP) AS QueryCountwithNodePrefixInCP,
        (SUM(queryWithNodePrefixInCP)*1.0/COUNT(*)) AS QueryCountwithNodePrefixInCPPercentage,
        0 AS InP95
      FROM NodesPerQuery WHERE InP95== false
   UNION ALL 
SELECT  Flight,
        NodePrefix,
        AVG(NodeCount) AS AvgNodeCountPerQuery,
        COUNT(*) AS QueryCount,
        SUM(queryWithNodePrefixInCP) AS QueryCountwithNodePrefixInCP,
        (SUM(queryWithNodePrefixInCP)*1.0/COUNT(*)) AS QueryCountwithNodePrefixInCPPercentage,
        1 AS InP95
      FROM NodesPerQuery WHERE InP95== true;


LogWithFltAvg = 
    SELECT Flight,          
           InCriticalPath,
           InP95,
           AVG(Latency) AS AvgLatency,
           COUNT(*) AS LogCount,
           Node,
           NodePrefix
    FROM LogWithFlt 
    WHERE  hasNodePrefix == true ;

OUTPUT TO @QueriesWithNodesPrefixResultStreamTemp1;
        
NodesDataWhole= 
   SELECT
     LogWithFltAvg.Flight,
     Node,
     LogWithFltAvg.NodePrefix,
     SUM(LogCount * AvgLatency)/SUM(LogCount) AS AvgLatency,
     SUM(InCriticalPath?LogCount:0) AS CPLogCount,
     QueryCount,
     0 AS InP95
     FROM LogWithFltAvg INNER JOIN QueriesForFlt ON
          LogWithFltAvg.Flight == QueriesForFlt.Flight AND 
          LogWithFltAvg.NodePrefix == QueriesForFlt.NodePrefix 
     WHERE 
          LogWithFltAvg.InP95 == false
UNION ALL   
  SELECT
     LogWithFltAvg.Flight,
     Node,
     LogWithFltAvg.NodePrefix,
     SUM(LogCount * AvgLatency)/SUM(LogCount) AS AvgLatency,
     SUM(InCriticalPath?LogCount:0) AS CPLogCount,
     QueryCount,
     1 AS InP95
     FROM LogWithFltAvg INNER JOIN QueriesForFlt ON
          LogWithFltAvg.Flight == QueriesForFlt.Flight AND 
          LogWithFltAvg.NodePrefix == QueriesForFlt.NodePrefix 
     WHERE
          LogWithFltAvg.InP95 == true;

NodesDataWithImpact = 
   SELECT
     Flight,
     NodePrefix,
     SUM ((CPLogCount * AvgLatency)/QueryCount) AS NodesCPContribution,
     InP95
     FROM NodesDataWhole;
OUTPUT TO @QueriesWithNodesPrefixResultStreamTemp2;

NodesOverrall =
  SELECT
   QueriesForFlt.Flight,
   AvgNodeCountPerQuery,   
   NodesCPContribution,
   QueryCountwithNodePrefixInCPPercentage,
   QueryCount,
   QueriesForFlt.InP95,
   QueriesForFlt.NodePrefix
  FROM  QueriesForFlt INNER JOIN NodesDataWithImpact ON
        QueriesForFlt.Flight == NodesDataWithImpact.Flight AND
        QueriesForFlt.InP95 == NodesDataWithImpact.InP95 AND
        QueriesForFlt.NodePrefix == NodesDataWithImpact.NodePrefix;
OUTPUT TO @QueriesWithNodesPrefixResultStreamTemp3;

FinalNodesOverall = 
    SELECT Flight,
           AvgNodeCountPerQuery,
           NodesCPContribution,
           QueryCount,
           NodePrefix,
           QueryCountwithNodePrefixInCPPercentage,
           InP95
    FROM NodesOverrall;

OUTPUT TO @QueriesWithNodesPrefixResultStream ORDER BY NodesCPContribution DESC
WITH STREAMEXPIRY "30";

/*****************************************************************************
Calculate query count
*****************************************************************************/
QueryData = 
    SELECT Flight,
           COUNT(DISTINCT QueryId) AS QueryCount
    FROM LogWithFlt;

PluginDataAgg =
    SELECT Flight,
           Node,
           AVG((InCriticalPath?1:0)*Latency) AS CPLatency,
           AVG(Latency) AS NodeLatency,
           AVG(StartTime) AS StartTime,
           SUM(Cached?1:0)*1.0/COUNT(*) AS CacheRate,
           AVG(CoreTime) AS CoreTime,
           AVG(RemoteLatency) AS RemoteLatency,
           AVG(RemoteRequestSize) AS RemoteRequestSize,
           AVG(RemoteResponseSize) AS RemoteResponseSize,
           SUM(InCriticalPath?1:0) AS CPNodeLogCount         
    FROM LogWithFlt
    WHERE hasNodePrefix==true;

OUTPUT TO @nodeDataResultStreamTemp1;

ControlFlightNodeResult = 
    SELECT Node,
           QueryCount,
           CPLatency,
           NodeLatency,
           StartTime,
           CacheRate,
           CoreTime,
           RemoteLatency,
           RemoteRequestSize,
           RemoteResponseSize,
           CPNodeLogCount
    FROM PluginDataAgg 
    INNER JOIN QueryData
    ON 
        PluginDataAgg.Flight == QueryData.Flight
    WHERE
        @controlFlight.Equals(PluginDataAgg.Flight, StringComparison.OrdinalIgnoreCase);   
OUTPUT TO @nodeDataResultStreamTemp2;

TreatmentFlightNodeResult = 
    SELECT Node,
           QueryCount,
           CPLatency,
           NodeLatency,
           StartTime,
           CacheRate,
           CoreTime,
           RemoteLatency,
           RemoteRequestSize,
           RemoteResponseSize,
           CPNodeLogCount
    FROM PluginDataAgg 
    INNER JOIN QueryData
    ON 
        PluginDataAgg.Flight == QueryData.Flight
    WHERE
        @treatmentFlight.Equals(PluginDataAgg.Flight, StringComparison.OrdinalIgnoreCase);   
OUTPUT TO @nodeDataResultStreamTemp3;

DiffResult =
    SELECT TreatmentFlightNodeResult.Node,
           ControlFlightNodeResult.CPLatency AS ControlCPLatency,
           TreatmentFlightNodeResult.CPLatency AS TreatmentCPLatency,
           (TreatmentFlightNodeResult.CPLatency - ControlFlightNodeResult.CPLatency) AS DiffCPLatency,
           ControlFlightNodeResult.NodeLatency AS ControlNodeLatency,
           TreatmentFlightNodeResult.NodeLatency AS TreatmentNodeLatency,
           (TreatmentFlightNodeResult.NodeLatency - ControlFlightNodeResult.NodeLatency) AS DiffNodeLatency,
           ControlFlightNodeResult.StartTime AS ControlStartTime,
           TreatmentFlightNodeResult.StartTime AS TreatmentStartTime,
           (TreatmentFlightNodeResult.StartTime - ControlFlightNodeResult.StartTime) AS DiffStartTime,
           ControlFlightNodeResult.CacheRate AS ControlCacheRate,
           TreatmentFlightNodeResult.CacheRate AS TreatmentCacheRate,
           (TreatmentFlightNodeResult.CacheRate - ControlFlightNodeResult.CacheRate) AS DiffCacheRate,
           ControlFlightNodeResult.CoreTime AS ControlCoreTime,
           TreatmentFlightNodeResult.CoreTime AS TreatmentCoreTime,
           (TreatmentFlightNodeResult.CoreTime - ControlFlightNodeResult.CoreTime) AS DiffCoreTime,
           ControlFlightNodeResult.RemoteLatency AS ControlRemoteLatency,
           TreatmentFlightNodeResult.RemoteLatency AS TreatmentRemoteLatency,
           (TreatmentFlightNodeResult.RemoteLatency - ControlFlightNodeResult.RemoteLatency) AS DiffRemoteLatency,
           ControlFlightNodeResult.RemoteRequestSize AS ControlRemoteRequestSize,
           TreatmentFlightNodeResult.RemoteRequestSize AS TreatmentRemoteRequestSize,
           (TreatmentFlightNodeResult.RemoteRequestSize - ControlFlightNodeResult.RemoteRequestSize) AS DiffRemoteRequestSize,
           ControlFlightNodeResult.RemoteResponseSize AS ControlRemoteResponseSize,
           TreatmentFlightNodeResult.RemoteResponseSize AS TreatmentRemoteResponseSize,
           (TreatmentFlightNodeResult.RemoteResponseSize - ControlFlightNodeResult.RemoteResponseSize) AS DiffRemoteResponseSize,
           ControlFlightNodeResult.CPNodeLogCount AS ControlCPNodeLogCount,
           TreatmentFlightNodeResult.CPNodeLogCount AS TreatmentCPNodeLogCount,
           (TreatmentFlightNodeResult.CPNodeLogCount - ControlFlightNodeResult.CPNodeLogCount) AS DiffCPNodeLogCount,
           ControlFlightNodeResult.QueryCount AS ControlQueryCount,
           TreatmentFlightNodeResult.QueryCount AS TreatmentQueryCount,
           (TreatmentFlightNodeResult.QueryCount - ControlFlightNodeResult.QueryCount) AS DiffQueryCount
    FROM TreatmentFlightNodeResult 
    LEFT OUTER JOIN ControlFlightNodeResult
    ON ControlFlightNodeResult.Node==TreatmentFlightNodeResult.Node;

OUTPUT TO @nodeDataResultStream ORDER BY DiffCPLatency DESC
WITH STREAMEXPIRY "30";

#CS
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using ScopeRuntime;
using Microsoft.Bing.Xap.QueryLog;

/// <summary>
/// General purpose extractor
/// </summary>
public class XapDataExtractor : Extractor
{
    private const string DefaultVariantDelimeter = ",";

    /// <summary>
    /// A list of keys to parse VariantContraint values 
    /// </summary>
    private string[] variantKeys;

    /// <summary>
    /// Gets or sets the delimeter for the concatenated variant string
    /// </summary>
    private string variantDelimeter;

    public override bool AllowColumnPruning { get { return false; } }

    /// <summary>
    /// Function used to specify the schema for the Scope Compiler
    /// </summary>
    /// <param name="columns">Array of string with requested column names</param>
    /// <param name="args">List of Input Arguments</param>
    /// <returns>Schema used by Scope to define the columns</returns>
    public override Schema Produces(string[] columns, string[] args)
    {
        Schema schema = new Schema();

        ///
        /// Columns for overall workflow data
        /// 
        schema.Add(new ColumnInfo("EnvironmentName", ColumnDataType.String));
        schema.Add(new ColumnInfo("Experiment", ColumnDataType.String));
        schema.Add(new ColumnInfo("ExperimentVersion", ColumnDataType.String));
        schema.Add(new ColumnInfo("Workflow", ColumnDataType.String));
        schema.Add(new ColumnInfo("WorkflowVersion", ColumnDataType.String));
        schema.Add(new ColumnInfo("CommonVariant", ColumnDataType.String));
        schema.Add(new ColumnInfo("FormattedFlights", ColumnDataType.String));
        schema.Add(new ColumnInfo("QueryId", ColumnDataType.String));
        schema.Add(new ColumnInfo("QueryLatency", ColumnDataType.Long));
        schema.Add(new ColumnInfo("SendStartMS", ColumnDataType.Long));
        schema.Add(new ColumnInfo("ReceiveEndMS", ColumnDataType.Long));
        schema.Add(new ColumnInfo("AHOverheadMS", ColumnDataType.Long));
        schema.Add(new ColumnInfo("StartAHOverheadMS", ColumnDataType.Long));
        schema.Add(new ColumnInfo("EndAHOverheadMS", ColumnDataType.Long));
        schema.Add(new ColumnInfo("Cost", ColumnDataType.Long));

        ///
        /// Data of individual plugin/node
        ///
        schema.Add(new ColumnInfo("NodesData", typeof(QueryNodesData)));

        return schema;
    }

    /// <summary>
    /// Extract function that determines Critical Path and returns one or more scope rows
    /// </summary>
    /// <param name="reader">StreamReader to read the input data stream</param>
    /// <param name="outputRow">Scope Row Object</param>
    /// <param name="args">List of Input Arguments. Used to pass in filters such as Workflow=x;y Experiment=Prod</param>
    /// <returns>The enumerator of rows</returns>
    /// <remarks>
    /// </remarks>
    public override IEnumerable<Row> Extract(StreamReader reader, Row outputRow, string[] args)
    {
        this.ProcessArguments(args);

        // The string (name) based indexer on the Row object is much slower that the int based indexer
        int idxOutputEnvironment = outputRow.Schema["EnvironmentName"];
        int idxOutputExperiment = outputRow.Schema["Experiment"];
        int idxOutputExperimentVersion = outputRow.Schema["ExperimentVersion"];
        int idxOutputWorkflow = outputRow.Schema["Workflow"];
        int idxOutputWorkflowVersion = outputRow.Schema["WorkflowVersion"];
        int idxOutputCommonVariant = outputRow.Schema["CommonVariant"];
        int idxOutputFormattedFlights = outputRow.Schema["FormattedFlights"];
        int idxOutputQueryId = outputRow.Schema["QueryId"];
        int idxOutputQueryLatency = outputRow.Schema["QueryLatency"];
        int idxOutputSendStartMS = outputRow.Schema["SendStartMS"];
        int idxOutputReceiveEndMS = outputRow.Schema["ReceiveEndMS"];
        int idxOutputAHOverheadMS = outputRow.Schema["AHOverheadMS"];
        int idxOutputStartAHOverheadMS = outputRow.Schema["StartAHOverheadMS"];
        int idxOutputEndAHOverheadMS = outputRow.Schema["EndAHOverheadMS"];
        int idxOutputCost = outputRow.Schema["Cost"];
        int idxOutputNodesData = outputRow.Schema["NodesData"];

        QueryNodesData nodesData = null;

        foreach (QueryContainer query in Reader.ReadStream(reader, OnBadLog))
        {
            // StreamReader returns null when it fails to parse the data stream, possibly caused by parser bugs or data stream itself, skip the record
            if (query == null || query.Events == null || query.Events.Count == 0)
            {
                continue;
            }

            // Get query properties
            QueryEventData eventData = query.Events[0].EventData;
            string commonVariant, formattedFlights, exp;
            long totalLatency = 0;
            bool isValidQuery = true;

            try
            {
                // Filter out invalid queries by variants
                string varAhWarmup;
                if (eventData.VariantConstraints.TryGetValue("AHWARMUP", out varAhWarmup) && varAhWarmup == "1")
                {
                    isValidQuery = false;
                }

                commonVariant = GetVariant(eventData.VariantConstraints);
                formattedFlights = VariantHelpers.GetFlightsString(variantDelimeter, eventData.VariantConstraintString,
                    variantKeys);
                exp = eventData.Experiment;
                totalLatency = eventData.SendCompleteMS;
            }
            catch
            {
                continue;
            }

            // Filter out invalid query with bad totalLatency or non-Prod experiments
            if (!isValidQuery || double.IsNaN(totalLatency) || totalLatency < 0 || !"Prod".Equals(exp, StringComparison.OrdinalIgnoreCase))
            {
                continue;
            }

            nodesData = null;
            if (eventData.Nodes != null && eventData.Nodes.Count > 0)
            {
                nodesData = new QueryNodesData();

                // Add all node logs to ExecutionGraph object
                foreach (QueryNodeEvent nodeEvent in eventData.Nodes)
                {
                    if (nodeEvent != null &&
                        !double.IsNaN(nodeEvent.StartOffsetMS) &&
                        !double.IsNaN(nodeEvent.EndOffsetMS) &&
                        !double.IsNaN(nodeEvent.RemoteLatency) &&
                        nodeEvent.StartOffsetMS >= 0 &&
                        nodeEvent.EndOffsetMS >= nodeEvent.StartOffsetMS &&
                        (nodeEvent.Finished || nodeEvent.Canceled))
                    {
                        nodesData.NodeDataList.Add(new NodeData
                        {
                            Cached = nodeEvent.Cached,
                            Canceled = nodeEvent.Canceled,
                            Finished = nodeEvent.Finished,
                            Failed = nodeEvent.Failed,
                            InCriticalPath = nodeEvent.InCriticalPath,
                            ImpactedByGC = nodeEvent.ImpactedByGC,
                            TotalLatency = totalLatency,
                            TimedOut = nodeEvent.TimedOut,
                            CoreTimeMicroSec = (int)nodeEvent.CoreTimeMicroSec,
                            Latency = (int)(nodeEvent.EndOffsetMS - nodeEvent.StartOffsetMS),
                            RemoteLatency = (int)nodeEvent.RemoteLatency,
                            RemoteRequestSize = nodeEvent.RemoteRequestSize,
                            RemoteResponseSize = nodeEvent.RemoteResponseSize,
                            StartTime = (int)nodeEvent.StartOffsetMS,
                            LegacyStatusCode = nodeEvent.LegacyStatusCode,
                            Node = nodeEvent.Node,
                            Plugin = nodeEvent.Plugin,
                        });
                    }
                }
            }

            outputRow[idxOutputEnvironment].Set(eventData.Environment);
            outputRow[idxOutputExperiment].Set(exp);
            outputRow[idxOutputExperimentVersion].Set(eventData.ExperimentVersion);
            outputRow[idxOutputWorkflow].Set(eventData.Workflow);
            outputRow[idxOutputWorkflowVersion].Set(eventData.WorkflowVersion);
            outputRow[idxOutputCommonVariant].Set(commonVariant);
            outputRow[idxOutputFormattedFlights].Set(formattedFlights);
            outputRow[idxOutputQueryId].Set(eventData.QueryID);
            outputRow[idxOutputQueryLatency].Set(eventData.SendCompleteMS);
            outputRow[idxOutputSendStartMS].Set(eventData.SendStartMS);
            outputRow[idxOutputReceiveEndMS].Set(eventData.ReceiveEndMS);
            outputRow[idxOutputAHOverheadMS].Set(eventData.TotalAHOverheadMS);
            outputRow[idxOutputStartAHOverheadMS].Set(eventData.StartAHOverheadMS);
            outputRow[idxOutputEndAHOverheadMS].Set(eventData.EndAHOverheadMS);
            outputRow[idxOutputCost].Set(eventData.Cost);
            outputRow[idxOutputNodesData].Set(nodesData);
            yield return outputRow;
        }
    }

    private void ProcessArguments(string[] args)
    {
        if (this.variantKeys == null && args.Length >= 2)
        {
            // Parse and validate the variant extraction parameters
            variantDelimeter = args[1];
            string delimeter = String.IsNullOrWhiteSpace(variantDelimeter) ? DefaultVariantDelimeter : variantDelimeter;
            variantKeys = args[0].Split(new String[] { delimeter }, StringSplitOptions.RemoveEmptyEntries);
            for (int i = 0; i < variantKeys.Length; i++)
            {
                variantKeys[i] = variantKeys[i].Trim();
            }
        }
    }

    private void OnBadLog(string recordData)
    {
    }

    public string GetVariant(Dictionary<string, string> variantConstraints)
    {
        string market, trafficPriority, trafficType, varAhForkedStr, varExpStr, varForkedStr,varTestStr;

        bool IsExpOrForkedOrTest = (variantConstraints.TryGetValue("AHFORKED", out varAhForkedStr) && varAhForkedStr == "1") ||
            (variantConstraints.TryGetValue("ISEXP", out varExpStr) && varExpStr == "1") ||
            (variantConstraints.TryGetValue("FORKED", out varForkedStr) && varForkedStr == "1") ||
            (variantConstraints.TryGetValue("ISTESTTRAFFIC", out varTestStr) && varTestStr == "1");


        if (!variantConstraints.TryGetValue("MKT", out market))
        {
            market = string.Empty;
        }
        if (!variantConstraints.TryGetValue("TRAFFICPRIORITY", out trafficPriority))
        {
            trafficPriority = string.Empty;
        }
        if (!variantConstraints.TryGetValue("traffictype", out trafficType))
        {
            trafficType = string.Empty;
        }

        if (!string.IsNullOrEmpty(trafficType) && "TEST_CAPACITYRUN".Equals(trafficType, StringComparison.OrdinalIgnoreCase))
        {
            return "CapacityRun";
        }

        if (!string.IsNullOrEmpty(trafficPriority) && !"Premium".Equals(trafficPriority, StringComparison.OrdinalIgnoreCase) && !"Full".Equals(trafficPriority, StringComparison.OrdinalIgnoreCase))
        {
            return "NonPremiumFull";
        }
        else
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendFormat("Mkt:{0}; ", "EN-US".Equals(market, StringComparison.OrdinalIgnoreCase) ? "EnUs" : "Others");
            bool isProdTrafficType = string.IsNullOrEmpty(trafficType) ||
                "untagged".Equals(trafficType, StringComparison.OrdinalIgnoreCase) ||
                "yahooprod".Equals(trafficType, StringComparison.OrdinalIgnoreCase);
            if(isProdTrafficType && !IsExpOrForkedOrTest)
            {
                bool isPremium = !string.IsNullOrEmpty(trafficPriority) && "Premium".Equals(trafficPriority, StringComparison.OrdinalIgnoreCase);
                sb.AppendFormat("TrafficType:{0}", isPremium ? "Premium" : "ProdNonPremium");                
            }
            else
            {
                sb.AppendFormat("TrafficType:{0}", "Others" );                
            }            
            return sb.ToString();
        }
    }
}

/// <summary>
/// UDT to include all nodes data of a query.
/// </summary>
public class QueryNodesData
{
    public List<NodeData> NodeDataList { get; private set; }

    public QueryNodesData()
    {
        this.NodeDataList = new List<NodeData>();
    }

    public override bool Equals(object other)
    {
        if (Object.ReferenceEquals(this, other))
        {
            return true;
        }

        return false;
    }

    public override int GetHashCode()
    {
        return this.NodeDataList.GetHashCode();
    }
}

/// <summary>
/// Define data fields of plugin/node.
/// </summary>
public class NodeData
{
    // Boolean values
    public bool Cached;
    public bool Canceled;
    public bool Finished;
    public bool Failed;
    public bool InCriticalPath;
    public bool ImpactedByGC;
    public bool TimedOut;

    // number values
    public long TotalLatency;
    public double CoreTimeMicroSec;
    public double Latency;
    public double RemoteLatency;
    public double RemoteRequestSize;
    public double RemoteResponseSize;
    public double StartTime;

    // Enum values
    public int LegacyStatusCode;

    // String values
    public string Node;
    public string Plugin;

    public override bool Equals(object other)
    {
        if (Object.ReferenceEquals(this, other))
        {
            return true;
        }

        return false;
    }

    public override int GetHashCode()
    {
        return this.Node.GetHashCode();
    }
}

public class QueryNodesDataProcessor : Processor
{
    public override bool AllowColumnPruning { get { return false; } }

    public override bool RowLevelProcessor { get { return true; } }

    public override Schema Produces(string[] requestedColumns, string[] args, Schema input)
    {
        Schema schema = new Schema();

        ///
        /// Columns for overall workflow data
        /// 
        schema.Add(CreateColumn("EnvironmentName", ColumnDataType.String, input[input["EnvironmentName"]], input[input["EnvironmentName"]]));
        schema.Add(CreateColumn("Workflow", ColumnDataType.String, input[input["Workflow"]], input[input["Workflow"]]));
        schema.Add(CreateColumn("CommonVariant", ColumnDataType.String, input[input["CommonVariant"]], input[input["CommonVariant"]]));
        schema.Add(CreateColumn("QueryId", ColumnDataType.String, input[input["QueryId"]], input[input["QueryId"]]));
        schema.Add(CreateColumn("FormattedFlights", ColumnDataType.String, input[input["FormattedFlights"]], input[input["FormattedFlights"]]));

        ///
        /// Columns for individual plugin/node data
        ///

        ColumnInfo nodesDataColumn = input[input["NodesData"]];

        // Boolean values
        schema.Add(CreateColumn("Cached", ColumnDataType.Boolean, nodesDataColumn));
        schema.Add(CreateColumn("Canceled", ColumnDataType.Boolean, nodesDataColumn));
        schema.Add(CreateColumn("Finished", ColumnDataType.Boolean, nodesDataColumn));
        schema.Add(CreateColumn("Failed", ColumnDataType.Boolean, nodesDataColumn));
        schema.Add(CreateColumn("InCriticalPath", ColumnDataType.Boolean, nodesDataColumn));
        schema.Add(CreateColumn("ImpactedByGC", ColumnDataType.Boolean, nodesDataColumn));

        schema.Add(CreateColumn("TimedOut", ColumnDataType.Boolean, nodesDataColumn));

        // number values
        schema.Add(CreateColumn("TotalLatency", ColumnDataType.Long, nodesDataColumn));
        schema.Add(CreateColumn("CoreTimeMicroSec", ColumnDataType.Double, nodesDataColumn));
        schema.Add(CreateColumn("Latency", ColumnDataType.Double, nodesDataColumn));
        schema.Add(CreateColumn("RemoteLatency", ColumnDataType.Double, nodesDataColumn));
        schema.Add(CreateColumn("RemoteRequestSize", ColumnDataType.Double, nodesDataColumn));
        schema.Add(CreateColumn("RemoteResponseSize", ColumnDataType.Double, nodesDataColumn));
        schema.Add(CreateColumn("StartTime", ColumnDataType.Double, nodesDataColumn));

        // Enum values
        schema.Add(CreateColumn("LegacyStatusCode", ColumnDataType.Double, nodesDataColumn));

        // String values
        schema.Add(CreateColumn("Node", ColumnDataType.String, nodesDataColumn));
        schema.Add(CreateColumn("Plugin", ColumnDataType.String, nodesDataColumn));

        return schema;
    }

    private ColumnInfo CreateColumn(string name, ColumnDataType type, ColumnInfo dependency, ColumnInfo source = null)
    {
        ColumnInfo column = new ColumnInfo(name, type);
        if (dependency != null)
        {
            column.AddDependency(dependency);
        }

        if (source != null)
        {
            column.Source = source;
        }

        return column;
    }

    public override IEnumerable<Row> Process(RowSet input, Row outputRow, string[] args)
    {
        // The string (name) based indexer on the Row object is much slower that the int based indexer
        int idxInputEnvironment = input.Schema["EnvironmentName"];
        int idxInputWorkflow = input.Schema["Workflow"];
        int idxInputCommonVariant = input.Schema["CommonVariant"];
        int idxInputQueryId = input.Schema["QueryId"];
        int idxInputFormattedFlights = input.Schema["FormattedFlights"];
        int idxInputNodesData = input.Schema["NodesData"];

        int idxOutputEnvironment = outputRow.Schema["EnvironmentName"];
        int idxOutputWorkflow = outputRow.Schema["Workflow"];
        int idxOutputCommonVariant = outputRow.Schema["CommonVariant"];
        int idxOutputQueryId = outputRow.Schema["QueryId"];
        int idxOutputFormattedFlights = outputRow.Schema["FormattedFlights"];

        int idxOutputCached = outputRow.Schema["Cached"];
        int idxOutputCanceled = outputRow.Schema["Canceled"];
        int idxOutputFinished = outputRow.Schema["Finished"];
        int idxOutputFailed = outputRow.Schema["Failed"];
        int idxOutputInCriticalPath = outputRow.Schema["InCriticalPath"];
        int idxOutputImpactedByGC = outputRow.Schema["ImpactedByGC"];
        int idxOutputTotalLatency = outputRow.Schema["TotalLatency"];
        int idxOutputTimedOut = outputRow.Schema["TimedOut"];
        int idxOutputCoreTimeMicroSec = outputRow.Schema["CoreTimeMicroSec"];
        int idxOutputLatency = outputRow.Schema["Latency"];
        int idxOutputRemoteLatency = outputRow.Schema["RemoteLatency"];
        int idxOutputRemoteRequestSize = outputRow.Schema["RemoteRequestSize"];
        int idxOutputRemoteResponseSize = outputRow.Schema["RemoteResponseSize"];
        int idxOutputStartTime = outputRow.Schema["StartTime"];
        int idxOutputLegacyStatusCode = outputRow.Schema["LegacyStatusCode"];
        int idxOutputNode = outputRow.Schema["Node"];
        int idxOutputPlugin = outputRow.Schema["Plugin"];

        foreach (Row inputRow in input.Rows)
        {
            inputRow[idxInputEnvironment].CopyTo(outputRow[idxOutputEnvironment]);
            inputRow[idxInputWorkflow].CopyTo(outputRow[idxOutputWorkflow]);
            inputRow[idxInputCommonVariant].CopyTo(outputRow[idxOutputCommonVariant]);
            inputRow[idxInputQueryId].CopyTo(outputRow[idxOutputQueryId]);
            inputRow[idxInputFormattedFlights].CopyTo(outputRow[idxOutputFormattedFlights]);

            QueryNodesData nodesData = inputRow[idxInputNodesData].Value as QueryNodesData;
            if (nodesData == null)
            {
                continue;
            }

            foreach (NodeData nodeData in nodesData.NodeDataList)
            {
                outputRow[idxOutputCached].Set(nodeData.Cached);
                outputRow[idxOutputCanceled].Set(nodeData.Canceled);
                outputRow[idxOutputFinished].Set(nodeData.Finished);
                outputRow[idxOutputFailed].Set(nodeData.Failed);
                outputRow[idxOutputInCriticalPath].Set(nodeData.InCriticalPath);
                outputRow[idxOutputImpactedByGC].Set(nodeData.ImpactedByGC);
                outputRow[idxOutputTotalLatency].Set(nodeData.TotalLatency);
                outputRow[idxOutputTimedOut].Set(nodeData.TimedOut);
                outputRow[idxOutputCoreTimeMicroSec].Set(nodeData.CoreTimeMicroSec);
                outputRow[idxOutputLatency].Set(nodeData.Latency);
                outputRow[idxOutputRemoteLatency].Set(nodeData.RemoteLatency);
                outputRow[idxOutputRemoteRequestSize].Set(nodeData.RemoteRequestSize);
                outputRow[idxOutputRemoteResponseSize].Set(nodeData.RemoteResponseSize);
                outputRow[idxOutputStartTime].Set(nodeData.StartTime);
                outputRow[idxOutputLegacyStatusCode].Set(nodeData.LegacyStatusCode);
                outputRow[idxOutputNode].Set(nodeData.Node);
                outputRow[idxOutputPlugin].Set(nodeData.Plugin);
                yield return outputRow;
            }
        }
    }
}

public class Utility
{
    public static double NomalizeAHOverhead(double ahOverhead)
    {
        return (ahOverhead > 10000 || ahOverhead < 0) ? 0 : ahOverhead;
    }

    public static string MergeProdVariant(string commonVariant)
    {
       if (!string.IsNullOrEmpty(commonVariant))
       {
            if ("Mkt:EnUs; TrafficType:ProdNonPremium".Equals(commonVariant)|| "Mkt:EnUs; TrafficType:Premium".Equals(commonVariant))
            {
               return "Mkt:EnUs; TrafficType:Prod";
            }
            else if ("Mkt:Others; TrafficType:ProdNonPremium".Equals(commonVariant) || "Mkt:Others; TrafficType:Premium".Equals(commonVariant))
            {
               return "Mkt:Others; TrafficType:Prod";
            }
       }
       return  "";
    }
    
    public static bool isMatchNodePrefix(string nodeName, string nodePrefix)
    {       
       return string.IsNullOrWhiteSpace(nodePrefix) || nodePrefix.Split(';').Any(o => string.Equals(nodeName.Split('.').First(), o, StringComparison.Ordinal));
    }
}
#ENDCS
